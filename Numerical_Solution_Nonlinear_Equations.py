#  Графики функции http://yotx.ru/

# Метод половинного деления
# Начало, конец, функция, точность, увиличение мощности, смещение, отладка
def Half_Division(A, B, F, E = 0.01, K1 = 1, K2 = 0):

    S , I = abs(A - B), 0 # Узнаём длину, счётчик в нулевой момент времени

    while ( S > E ):    # Цикл нахождения корня

        I += 1              # Счётчик
        C = (A + B) / 2     # Находим С (середину)

        # Проверка, откинуть левую или правую часть в случае f(x1) * f(x2) < 0
        if( ( ( F(A) * K1 ) + K2 ) * ( ( F(C) * K1 ) + K2 ) > 0): A = C
        else: B = C

        S = abs(A - B)          # Длина отрезка

    return ( (A + B) / 2 )      # Возвращаем значение корня
    
# Метод односторонней разности
# Функция, Xi, Xi-1
def  Diff_One_Sided(F,X1,X2): return ( ( F(X1) - F(X2) ) / ( X1 - X2 ) )

# Метод Ньютона (касательных)
# Начало, конец, функция, точность, увиличение мощности, смещение, отладка
def Tangent_Method(A, B, F, dF, E = 0.01):

    X = [( ( A + B ) / 2)]     

    while( abs( F( X[len(X)-1] ) ) > E): 
        I = len(X)-1
        X.append( X[I] - ( F(X[I]) / dF(X[I]) ))      
    
    return X[len(X)-1]


def _F(X): return (5 * (X**3) - (X ** 2) - 20 * X + 4)
def _dF(X): return (15 * (X ** 2) - 2 * X - 20)

# Главный метод
if __name__ == '__main__':
    print("Метод половинного деления: ", Half_Division( -5, 1, _F, E = 0.00001 ) )
    #print("Метод Ньютона: ", Tangent_Method( -10, 10, _F, _dF ) )

    G1, G2 = 5 , G1 + 1
    print(G1,G2)




