# Метод Ньютона (касательных)
# Функция, его производная, начало и конец, точность, вернуть кол-во шагов
def Tangent_Method(F, dF, A = 0, B = 1, E = 0.01, Step = False):
    X, I = ((A + B) / 2), 0         # Назодим первую X
    while (abs(F(X)) > E):          # Проверка X при определённой точности
        I += 1                      # Счётчик
        X = X - (F(X) / dF(X))      # Находим след Xi
    if(Step): return [X, I]         # Возвращаем значение корня и кол-во шагов
    else: return X                  # Возвращаем значение корня

# Метод половинного деления
# Функция, начало, конец, точность, увиличение мощности, смещение, вернуть кол-во шагов
def Half_Division(F, A = 0, B = 1, E = 0.01, K1 = 1, K2 = 0, Step = False):
    S , I = abs(A - B), 0       # Узнаём длину, счётчик в нулевой момент времени
    while ( S > E ):            # Цикл нахождения корня
        I += 1                  # Счётчик
        C = (A + B) / 2         # Находим С (середину)
        # Проверка, откинуть левую или правую часть в случае f(x1) * f(x2) < 0
        if( ( ( F(A) * K1 ) + K2 ) * ( ( F(C) * K1 ) + K2 ) > 0): A = C
        else: B = C
        S = abs(A - B)                      # Длина отрезка
    if(Step): return [( (A + B) / 2 ), I]   # Возвращаем значение корня и кол-во шагов
    else: return ( (A + B) / 2 )            # Возвращаем значение корня
